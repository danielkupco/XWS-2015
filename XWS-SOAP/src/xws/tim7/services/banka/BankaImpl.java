/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

package xws.tim7.services.banka;

import java.math.BigDecimal;
import java.math.BigInteger;
import java.util.logging.Logger;

import javax.ejb.EJB;
import javax.jws.Oneway;
import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.jws.soap.SOAPBinding;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;

import sessionbeans.mt102.MT102DaoLocal;
import sessionbeans.mt103.MT103DaoLocal;
import sessionbeans.nalogzaplacanje.NalogZaPlacanjeDaoLocal;
import sessionbeans.racun_firme.RacunFirmeDaoLocal;
import xws.tim7.entities.globals.MT9XXType;
import xws.tim7.entities.globals.StatusType;
import xws.tim7.entities.mt102.MT102Type;
import xws.tim7.entities.mt103.MT103Type;
import xws.tim7.entities.nalogzaplacanje.NalogZaPlacanjeType;
import xws.tim7.services.cb.CentralnaBanka_CentralnaBankaPort_Client;

/**
 * This class was generated by Apache CXF 2.6.5 2015-08-22T23:27:53.404+02:00
 * Generated source version: 2.6.5
 * 
 */

@javax.jws.WebService(serviceName = "BankaService", portName = "BankaPort", targetNamespace = "http://xws/tim7/banka", wsdlLocation = "file:/home/danex/Documents/Eclipse_workspaces/XWS/XWS_test/WEB-INF/wsdl/banka.wsdl", endpointInterface = "xws.tim7.banka.Banka")
public class BankaImpl implements Banka {

	@EJB
	private RacunFirmeDaoLocal racuni;

	@EJB
	private NalogZaPlacanjeDaoLocal naloziZaPlacanje;

	@EJB
	private MT102DaoLocal Mt102Clearing;

	@EJB
	private MT103DaoLocal Mt103Rtgs;

	private static final Logger LOG = Logger.getLogger(BankaImpl.class
			.getName());

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#obaviClearing(*
	 */
	public void obaviClearing() {
		LOG.info("Executing operation obaviClearing");
		try {
			// pokupi MT102 iz Dao, prosledi CB
			for (MT102Type mt102 : Mt102Clearing.findAll()) {
				CentralnaBanka_CentralnaBankaPort_Client client = new CentralnaBanka_CentralnaBankaPort_Client("");
				client.primiMT102(mt102);
			}
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiNalogZaPlacanje(xws.tim7.nalogzaplacanje.
	 * NalogZaPlacanjeType nalogZaPlacanje )*
	 */
	public xws.tim7.entities.globals.StatusType primiNalogZaPlacanje(
			xws.tim7.entities.nalogzaplacanje.NalogZaPlacanjeType nalogZaPlacanje) {
		LOG.info("Executing operation primiNalogZaPlacanje");
		System.out.println(nalogZaPlacanje);

		try {
			xws.tim7.entities.globals.StatusType _return = null;

			String racunKupca = nalogZaPlacanje.getOsnovaNalogaZaPlacanje()
					.getRacunDuznika().getBrojRacuna();
			String racunDobavljaca = nalogZaPlacanje
					.getOsnovaNalogaZaPlacanje().getRacunPoverioca()
					.getBrojRacuna();

			boolean istaBanka = racunKupca.substring(0, 3).equals(
					racunDobavljaca.substring(0, 3));

			if (nalogZaPlacanje.isHitno()
					|| nalogZaPlacanje.getOsnovaNalogaZaPlacanje().getIznos()
							.compareTo(new BigDecimal(250000)) > 0) {
				// CB, RTGS
				// RacunDao.reserveFunds(racunKupca,
				// naloZaPlacanje.getOsnovaNalogaZaPlacanje.getIznos());
				// CBClient = new CBClient(racunKupca.substring(0, 3));
				// //kupac.racun.prve-tri-cifre
				// CBClient.primiMT103(nalogZaPlacanje); // client napravi MT103
				// od toga, prosledi implementaciji

				racuni.reserveFunds(racunKupca, nalogZaPlacanje
						.getOsnovaNalogaZaPlacanje().getIznos());
				CentralnaBanka_CentralnaBankaPort_Client cbClient = new CentralnaBanka_CentralnaBankaPort_Client(
						racunKupca.substring(0, 3));
				_return = cbClient.primitMT103(nalogZaPlacanje);

			} else if (!istaBanka) {
				// CB, clearing
				// RESERVE FUNDS != SKINI SA RACUNA
				// RacunDao.reserveFunds(racunKupca,
				// nalogZaPlacanje.getOsnovaNalogaZaPlacanje.getIznos());
				// periodicno salji MT102 CBanci???
				// MT102 se sastoji od nalogazaplacanje od poslednjeg clearinga
				// svaki nalog u MT102 mora biti manji od 250k i upuceni
				// klijentima JEDNE banke
				// CB prima MT102 neko vreme?, i onda salje MT900 da javi da se
				// banka zaduzila (skida sa racuna u MT900)
				// takodje CB prosledjuje MT102 + MT910 drugoj banci, koja to
				// prima i prenosi sredstva na te racune

				Mt102Clearing.addNalog(nalogZaPlacanje); // nadji na osnovu
															// banke
															// kupca/dobavljaca
															// u odredjeni MT102
															// da gura stavku

			} else {
				// RacunDao.transferFunds(racunKupca, racunDobavljaca,
				// nalogZaPlacanje.getOsnovaNalogaZaPlacanje().getIznos());
				// log info

				racuni.transferFunds(racunKupca, racunDobavljaca,
						nalogZaPlacanje.getOsnovaNalogaZaPlacanje().getIznos());

				_return = new StatusType();
				_return.setPoruka("ista banka");
				_return.setStatusKod(new BigInteger("200"));
			}

			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}

	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiZahtevZaIzvod(xws.tim7.zahtevzaizvod.
	 * ZahtevZaIzvodType zahtevZaIzvod )*
	 */
	public xws.tim7.entities.presek.PresekType primiZahtevZaIzvod(
			xws.tim7.entities.zahtevzaizvod.ZahtevZaIzvodType zahtevZaIzvod)
			throws StatusMessage {
		LOG.info("Executing operation primiZahtevZaIzvod");
		System.out.println(zahtevZaIzvod);
		try {
			xws.tim7.entities.presek.PresekType _return = null;

			// izvod se sastoji od mnogo stavki
			// pa stavke grupisane u preseke
			// ===> presek == NUM_PER_PRESEK*stavka

			// nzps = NalogZaPlacanjeDao.findByAccountAndDate();
			// ObjectFactory factory = new ObjectFactory();
			// izvod = factory.izvodType(zahzaizvod);
			// foreach nzp in nzps: presek = factory.createPresek(nzp);
			// return presek[redniBroj];

			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			// TODO Fault
			// throw new StatusMessage("statusMessage...");
			throw new RuntimeException(ex);
		}
	}

	/* POZIVA SAMO CENTRALNA BANKA */

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiMT900(xws.tim7.globals.MT9XXType
	 * porukaOZaduzenjuMT900 )*
	 */
	public xws.tim7.entities.globals.StatusType primiMT900(
			xws.tim7.entities.globals.MT9XXType porukaOZaduzenjuMT900) {
		LOG.info("Executing operation primiMT900");
		System.out.println(porukaOZaduzenjuMT900);
		try {
			xws.tim7.entities.globals.StatusType _return = null;

			// RTGS ili clearing
			// primi MT900 poruku o zaduzenju i skini novce sa odredjenog racuna

			//TODO proveri ispravnost podataka
			//TODO mora da trazi po MT102 i MT103 ? jer na to reaguje
			NalogZaPlacanjeType nzp = naloziZaPlacanje.findByNalog(porukaOZaduzenjuMT900.getIDPorukeNaloga());
			//TODO proveri ispravnost iznosa
			racuni.skiniSaRacuna(nzp.getOsnovaNalogaZaPlacanje().getRacunDuznika(),porukaOZaduzenjuMT900.getIznos());
			//TODO _return da bude korektna poruka
			
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiMT910(xws.tim7.globals.MT9XXType
	 * porukaOOdobrenjuMT910 )*
	 */
	public xws.tim7.entities.globals.StatusType primiMT910(
			xws.tim7.entities.globals.MT9XXType porukaOOdobrenjuMT910) {
		LOG.info("Executing operation primiMT910");
		System.out.println(porukaOOdobrenjuMT910);
		try {
			xws.tim7.entities.globals.StatusType _return = null;

			// treba da primi MT103/102 pre toga
			// prosledi sa MT103/102 novce firmi.
			// racun = MT103Dao.findByID(porukaOOdobrenjuMT910.getIdPoruke());
			// racun = MT102Dao.findByID(porukaOOdobrenjuMT910.getIdPoruke());
			// RacunDao.dodajSredstva(racun, porukaOOdobrenjuMt910.getIznos());

			//TODO ne radi se to tako...
			MT103Type rtgs = null;
			MT102Type clearing = null;
			if ( (rtgs = Mt103Rtgs.findByMT910Id(porukaOOdobrenjuMT910.getIDPoruke())) !=null ) {
				;//TODO
			} else if ( (clearing = Mt102Clearing.findByMT910Id(porukaOOdobrenjuMT910.getIDPoruke())) != null) {
				;//TODO
			} else {
				throw new Exception("asd");
			}
			
			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiMT103(xws.tim7.mt103.MT103Type rtgsMT103
	 * )*
	 */
	public xws.tim7.entities.globals.StatusType primiMT103(
			xws.tim7.entities.mt103.MT103Type rtgsMT103) {
		LOG.info("Executing operation primiMT103");
		System.out.println(rtgsMT103);
		try {
			xws.tim7.entities.globals.StatusType _return = null;

			// Aha, sad znam da Firmi X iz MT103 trebam da prebacim novce...
			//TODO: _return da bude korektan status
			Mt103Rtgs.persist(rtgsMT103);

			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

	/*
	 * (non-Javadoc)
	 * 
	 * @see xws.tim7.banka.Banka#primiMT102(xws.tim7.mt102.MT102Type
	 * nalogZaGrupnaPlacanja )*
	 */
	public xws.tim7.entities.globals.StatusType primiMT102(
			xws.tim7.entities.mt102.MT102Type nalogZaGrupnaPlacanja) {
		LOG.info("Executing operation primiMT102");
		System.out.println(nalogZaGrupnaPlacanja);
		try {
			xws.tim7.entities.globals.StatusType _return = null;

			// aha, sad znam da firmi X izMT102 trebam da prebacim novce...
			//TODO: _return da bude korektan status
			Mt102Clearing.persist(nalogZaGrupnaPlacanja);

			return _return;
		} catch (java.lang.Exception ex) {
			ex.printStackTrace();
			throw new RuntimeException(ex);
		}
	}

}
