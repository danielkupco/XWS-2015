
package soap.tim7.services.cb;

/**
 * Please modify this class to meet your needs
 * This class is not complete
 */

import java.io.IOException;
import java.net.URL;

import javax.ejb.EJB;
import javax.xml.bind.JAXBException;
import javax.xml.namespace.QName;

import sessionbeans.banka.BankaDaoLocal;
import soap.tim7.entities.banka.Banka;
import soap.tim7.entities.globals.StatusType;
import soap.tim7.entities.mt102.MT102Type;
import soap.tim7.entities.mt103.MT103Type;
import soap.tim7.entities.nalogzaplacanje.NalogZaPlacanjeType;

/**
 * This class was generated by Apache CXF 2.6.5
 * 2015-08-22T23:28:00.980+02:00
 * Generated source version: 2.6.5
 * 
 */
public final class CentralnaBanka_CentralnaBankaPort_Client {
	
	@EJB
	private BankaDaoLocal bankaDao;

    private static final QName SERVICE_NAME = new QName("http://xws/tim7/cb", "CentralnaBankaService");

    private String wsdlPart = "http://localhost:8080/xws-soap/CentralnaBankaService?wsdl";
    private String bankaId;
    
    private CentralnaBanka getService() {
    	CentralnaBanka retVal = null;
    	try {
    		URL wsdlUrl = new URL(wsdlPart);
            CentralnaBankaService ss = new CentralnaBankaService(wsdlUrl, SERVICE_NAME);
            retVal = ss.getCentralnaBankaPort();  
    	} catch (Exception e) {
    		e.printStackTrace();
    	}
    	return retVal;
    }
    
    public StatusType primiMT102(MT102Type mt102) {
    	//soap.tim7.entities.mt102.ObjectFactory factory = new soap.tim7.entities.mt102.ObjectFactory();
    	//MT102Type clearingNalog = factory.createMT102Type(nzp);
    	return this.getService().primiMT102(mt102);
    }
    
    public StatusType primitMT103(NalogZaPlacanjeType nzp) {
    	soap.tim7.entities.mt103.ObjectFactory factory = new soap.tim7.entities.mt103.ObjectFactory();
    	MT103Type rtgsNalog = factory.createMT103Type(nzp);
    	
    	//postavljanje podataka koji fale (obracunski racun i swift)
    	try {
			Banka bankaPoverioca = bankaDao.findBankaByIDBanke(rtgsNalog.getOsnovaNalogaZaPlacanje().getRacunPoverioca().getBrojRacuna().substring(0, 3));
			Banka bankaDuznika = bankaDao.findBankaByIDBanke(rtgsNalog.getOsnovaNalogaZaPlacanje().getRacunDuznika().getBrojRacuna().substring(0, 3));
			
			rtgsNalog.setObracunskiRacunBankePoverioca(bankaPoverioca.getObracunskiRacun());
			rtgsNalog.setObracunskiRacunBankeDuznika(bankaDuznika.getObracunskiRacun());
			
			rtgsNalog.setSWIFTKodBankePoverioca(bankaPoverioca.getSWIFT());
			rtgsNalog.setSWIFTKodBankeDuznika(bankaDuznika.getSWIFT());
    	
    	} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (JAXBException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
    	
    	return this.getService().primiMT103(rtgsNalog);
    }
    
    public CentralnaBanka_CentralnaBankaPort_Client(String banka) {
    	this.bankaId = banka;		//banka koja poziva
    }
    
 
}
